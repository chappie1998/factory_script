var A=Object.defineProperty;var w=(i=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(i,{get:(o,e)=>(typeof require!="undefined"?require:o)[e]}):i)(function(i){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});var W=(i,o)=>()=>(i&&(o=i(i=0)),o);var L=(i,o)=>{for(var e in o)A(i,e,{get:o[e],enumerable:!0})};var n=W(()=>{});n();n();import{NativeAssetId as l}from"@fuel-ts/constants";import{hashMessage as K,hashTransaction as q}from"@fuel-ts/hasher";import{HDWallet as P}from"@fuel-ts/hdwallet";import{AbstractWallet as E}from"@fuel-ts/interfaces";import{Mnemonic as F}from"@fuel-ts/mnemonic";import{ScriptTransactionRequest as S,transactionRequestify as h,Provider as U}from"@fuel-ts/providers";import{Signer as B}from"@fuel-ts/signer";import{MAX_GAS_PER_TX as C}from"@fuel-ts/transactions";var z="http://127.0.0.1:4000/graphql",u=class extends E{constructor(e,t=z){super();let r=new B(e);this.signer=()=>r,this.provider=this.connect(t)}get address(){return this.signer().address}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}connect(e){if(e)typeof e=="string"?this.provider=new U(e):this.provider=e;else throw new Error("Provider is required");return this.provider}signMessage(e){return this.signer().sign(K(e))}signTransaction(e){let t=h(e),r=q(t);return this.signer().sign(r)}populateTransactionWitnessesSignature(e){let t=h(e),r=t.getCoinInputWitnessIndexByOwner(this.address);if(typeof r=="number"){let s=this.signTransaction(t);t.updateWitness(r,s)}return t}async getCoinsToSpend(e,t,r){return this.provider.getCoinsToSpend(this.address,e,t,r)}async getCoins(){let e=[],r;for(;;){let s=await this.provider.getCoins(this.address,void 0,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return e}async getMessages(){let e=[],r;for(;;){let s=await this.provider.getMessages(this.address,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} messages are not yet supported`)}return e}async getBalance(e=l){return await this.provider.getBalance(this.address,e)}async getBalances(){let e=[],r;for(;;){let s=await this.provider.getBalances(this.address,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return e}async fund(e){let t=e.calculateFee(),r=await this.getCoinsToSpend([t]);e.addCoins(r)}async transfer(e,t,r=l,s={}){let a={gasLimit:C,...s},c=new S(a);c.addCoinOutput(e,t,r);let f=await this.getCoinsToSpend([[t,r],c.calculateFee()]);return c.addCoins(f),this.sendTransaction(c)}async sendTransaction(e){let t=h(e);return this.provider.sendTransaction(this.populateTransactionWitnessesSignature(t))}async simulateTransaction(e){let t=h(e);return this.provider.call(this.populateTransactionWitnessesSignature(t),{utxoValidation:!0})}async buildPredicateTransaction(e,t,r=l,s){let a={fundTransaction:!0,...s},c=new S({gasLimit:C,...a});c.addCoinOutput(e,t,r);let f=[];if(a.fundTransaction&&f.push(c.calculateFee()),f.length){let k=await this.getCoinsToSpend(f);c.addCoins(k)}return c}async submitPredicate(e,t,r=l,s){let a=await this.buildPredicateTransaction(e,t,r,s);return(await this.sendTransaction(a)).waitForResult()}async submitSpendPredicate(e,t,r,s=l,a){return this.provider.submitSpendPredicate(e,t,this.address,r,s,a)}static generate(e){let t=B.generatePrivateKey(e==null?void 0:e.entropy);return new u(t,e==null?void 0:e.provider)}static fromSeed(e,t){let s=P.fromSeed(e).derivePath(t||u.defaultPath);return new u(s.privateKey)}static fromMnemonic(e,t,r){let s=F.mnemonicToSeed(e,r),c=P.fromSeed(s).derivePath(t||u.defaultPath);return new u(c.privateKey)}static fromExtendedKey(e){let t=P.fromExtendedKey(e);return new u(t.privateKey)}},m=u;m.defaultPath="m/44'/1179993420'/0'/0/0";var N={};L(N,{generateTestWallet:()=>O,seedWallet:()=>R});n();n();n();n();n();import{arrayify as se}from"@ethersproject/bytes";n();var T,v="Node";typeof globalThis<"u"&&globalThis.crypto&&(T=globalThis.crypto,v="Web");if(!T&&typeof w=="function")try{T=w("crypto"),v="Node"}catch(i){console.error("keystore expects a standard Web browser or Node environment.",i)}var y=T,b=v;n();var g=i=>b==="Node"?y.randomBytes(i):y.getRandomValues(new Uint8Array(i));n();import{coinQuantityfy as I,ScriptTransactionRequest as Q}from"@fuel-ts/providers";var R=async(i,o)=>{let e=new m(process.env.GENESIS_SECRET||g(32),i.provider),t=await e.getCoinsToSpend(o),r=new Q({gasLimit:1e4,gasPrice:1});r.addCoins(t),o.map(I).forEach(({amount:a,assetId:c})=>r.addCoinOutput(i.address,a,c)),await(await e.sendTransaction(r)).wait()},O=async(i,o)=>{let e=m.generate({provider:i});return o&&await R(e,o),e};export{N as TestUtils,m as Wallet};
//# sourceMappingURL=index.mjs.map