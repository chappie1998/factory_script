"use strict";var v=Object.defineProperty;var K=Object.getOwnPropertyDescriptor;var q=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var E=(n,o)=>()=>(n&&(o=n(n=0)),o);var R=(n,o)=>{for(var e in o)v(n,e,{get:o[e],enumerable:!0})},F=(n,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let r of q(o))!U.call(n,r)&&r!==e&&v(n,r,{get:()=>o[r],enumerable:!(t=K(o,r))||t.enumerable});return n};var M=n=>F(v({},"__esModule",{value:!0}),n);var i=E(()=>{});var G={};R(G,{TestUtils:()=>x,Wallet:()=>d});module.exports=M(G);i();i();var f=require("@fuel-ts/constants"),T=require("@fuel-ts/hasher"),h=require("@fuel-ts/hdwallet"),N=require("@fuel-ts/interfaces"),k=require("@fuel-ts/mnemonic"),p=require("@fuel-ts/providers"),S=require("@fuel-ts/signer"),B=require("@fuel-ts/transactions"),z="http://127.0.0.1:4000/graphql",m=class extends N.AbstractWallet{constructor(e,t=z){super();let r=new S.Signer(e);this.signer=()=>r,this.provider=this.connect(t)}get address(){return this.signer().address}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}connect(e){if(e)typeof e=="string"?this.provider=new p.Provider(e):this.provider=e;else throw new Error("Provider is required");return this.provider}signMessage(e){return this.signer().sign((0,T.hashMessage)(e))}signTransaction(e){let t=(0,p.transactionRequestify)(e),r=(0,T.hashTransaction)(t);return this.signer().sign(r)}populateTransactionWitnessesSignature(e){let t=(0,p.transactionRequestify)(e),r=t.getCoinInputWitnessIndexByOwner(this.address);if(typeof r=="number"){let s=this.signTransaction(t);t.updateWitness(r,s)}return t}async getCoinsToSpend(e,t,r){return this.provider.getCoinsToSpend(this.address,e,t,r)}async getCoins(){let e=[],r;for(;;){let s=await this.provider.getCoins(this.address,void 0,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return e}async getMessages(){let e=[],r;for(;;){let s=await this.provider.getMessages(this.address,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} messages are not yet supported`)}return e}async getBalance(e=f.NativeAssetId){return await this.provider.getBalance(this.address,e)}async getBalances(){let e=[],r;for(;;){let s=await this.provider.getBalances(this.address,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return e}async fund(e){let t=e.calculateFee(),r=await this.getCoinsToSpend([t]);e.addCoins(r)}async transfer(e,t,r=f.NativeAssetId,s={}){let a={gasLimit:B.MAX_GAS_PER_TX,...s},c=new p.ScriptTransactionRequest(a);c.addCoinOutput(e,t,r);let l=await this.getCoinsToSpend([[t,r],c.calculateFee()]);return c.addCoins(l),this.sendTransaction(c)}async sendTransaction(e){let t=(0,p.transactionRequestify)(e);return this.provider.sendTransaction(this.populateTransactionWitnessesSignature(t))}async simulateTransaction(e){let t=(0,p.transactionRequestify)(e);return this.provider.call(this.populateTransactionWitnessesSignature(t),{utxoValidation:!0})}async buildPredicateTransaction(e,t,r=f.NativeAssetId,s){let a={fundTransaction:!0,...s},c=new p.ScriptTransactionRequest({gasLimit:B.MAX_GAS_PER_TX,...a});c.addCoinOutput(e,t,r);let l=[];if(a.fundTransaction&&l.push(c.calculateFee()),l.length){let W=await this.getCoinsToSpend(l);c.addCoins(W)}return c}async submitPredicate(e,t,r=f.NativeAssetId,s){let a=await this.buildPredicateTransaction(e,t,r,s);return(await this.sendTransaction(a)).waitForResult()}async submitSpendPredicate(e,t,r,s=f.NativeAssetId,a){return this.provider.submitSpendPredicate(e,t,this.address,r,s,a)}static generate(e){let t=S.Signer.generatePrivateKey(e==null?void 0:e.entropy);return new m(t,e==null?void 0:e.provider)}static fromSeed(e,t){let s=h.HDWallet.fromSeed(e).derivePath(t||m.defaultPath);return new m(s.privateKey)}static fromMnemonic(e,t,r){let s=k.Mnemonic.mnemonicToSeed(e,r),c=h.HDWallet.fromSeed(s).derivePath(t||m.defaultPath);return new m(c.privateKey)}static fromExtendedKey(e){let t=h.HDWallet.fromExtendedKey(e);return new m(t.privateKey)}},d=m;d.defaultPath="m/44'/1179993420'/0'/0/0";var x={};R(x,{generateTestWallet:()=>O,seedWallet:()=>L});i();i();i();i();i();var I=require("@ethersproject/bytes");i();var w,C="Node";typeof globalThis<"u"&&globalThis.crypto&&(w=globalThis.crypto,C="Web");if(!w&&typeof require=="function")try{w=require("crypto"),C="Node"}catch(n){console.error("keystore expects a standard Web browser or Node environment.",n)}var y=w,b=C;i();var g=n=>b==="Node"?y.randomBytes(n):y.getRandomValues(new Uint8Array(n));i();var P=require("@fuel-ts/providers");var L=async(n,o)=>{let e=new d(process.env.GENESIS_SECRET||g(32),n.provider),t=await e.getCoinsToSpend(o),r=new P.ScriptTransactionRequest({gasLimit:1e4,gasPrice:1});r.addCoins(t),o.map(P.coinQuantityfy).forEach(({amount:a,assetId:c})=>r.addCoinOutput(n.address,a,c)),await(await e.sendTransaction(r)).wait()},O=async(n,o)=>{let e=d.generate({provider:n});return o&&await L(e,o),e};0&&(module.exports={TestUtils,Wallet});
//# sourceMappingURL=index.js.map