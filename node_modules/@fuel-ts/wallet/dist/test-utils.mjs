var w=(i=>typeof require!="undefined"?require:typeof Proxy!="undefined"?new Proxy(i,{get:(c,e)=>(typeof require!="undefined"?require:c)[e]}):i)(function(i){if(typeof require!="undefined")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});var N=(i,c)=>()=>(i&&(c=i(i=0)),c);var n=N(()=>{});n();n();n();n();n();import{arrayify as G}from"@ethersproject/bytes";n();var h,P="Node";typeof globalThis<"u"&&globalThis.crypto&&(h=globalThis.crypto,P="Web");if(!h&&typeof w=="function")try{h=w("crypto"),P="Node"}catch(i){console.error("keystore expects a standard Web browser or Node environment.",i)}var y=h,T=P;n();var l=i=>T==="Node"?y.randomBytes(i):y.getRandomValues(new Uint8Array(i));n();import{coinQuantityfy as U,ScriptTransactionRequest as z}from"@fuel-ts/providers";n();import{NativeAssetId as g}from"@fuel-ts/constants";import{hashMessage as L,hashTransaction as W}from"@fuel-ts/hasher";import{HDWallet as v}from"@fuel-ts/hdwallet";import{AbstractWallet as K}from"@fuel-ts/interfaces";import{Mnemonic as q}from"@fuel-ts/mnemonic";import{ScriptTransactionRequest as B,transactionRequestify as b,Provider as E}from"@fuel-ts/providers";import{Signer as C}from"@fuel-ts/signer";import{MAX_GAS_PER_TX as x}from"@fuel-ts/transactions";var F="http://127.0.0.1:4000/graphql",u=class extends K{constructor(e,t=F){super();let r=new C(e);this.signer=()=>r,this.provider=this.connect(t)}get address(){return this.signer().address}get privateKey(){return this.signer().privateKey}get publicKey(){return this.signer().publicKey}connect(e){if(e)typeof e=="string"?this.provider=new E(e):this.provider=e;else throw new Error("Provider is required");return this.provider}signMessage(e){return this.signer().sign(L(e))}signTransaction(e){let t=b(e),r=W(t);return this.signer().sign(r)}populateTransactionWitnessesSignature(e){let t=b(e),r=t.getCoinInputWitnessIndexByOwner(this.address);if(typeof r=="number"){let s=this.signTransaction(t);t.updateWitness(r,s)}return t}async getCoinsToSpend(e,t,r){return this.provider.getCoinsToSpend(this.address,e,t,r)}async getCoins(){let e=[],r;for(;;){let s=await this.provider.getCoins(this.address,void 0,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} coins are not yet supported`)}return e}async getMessages(){let e=[],r;for(;;){let s=await this.provider.getMessages(this.address,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} messages are not yet supported`)}return e}async getBalance(e=g){return await this.provider.getBalance(this.address,e)}async getBalances(){let e=[],r;for(;;){let s=await this.provider.getBalances(this.address,{first:9999,after:r});if(e.push(...s),!(s.length>=9999))break;throw new Error(`Wallets with more than ${9999} balances are not yet supported`)}return e}async fund(e){let t=e.calculateFee(),r=await this.getCoinsToSpend([t]);e.addCoins(r)}async transfer(e,t,r=g,s={}){let o={gasLimit:x,...s},a=new B(o);a.addCoinOutput(e,t,r);let f=await this.getCoinsToSpend([[t,r],a.calculateFee()]);return a.addCoins(f),this.sendTransaction(a)}async sendTransaction(e){let t=b(e);return this.provider.sendTransaction(this.populateTransactionWitnessesSignature(t))}async simulateTransaction(e){let t=b(e);return this.provider.call(this.populateTransactionWitnessesSignature(t),{utxoValidation:!0})}async buildPredicateTransaction(e,t,r=g,s){let o={fundTransaction:!0,...s},a=new B({gasLimit:x,...o});a.addCoinOutput(e,t,r);let f=[];if(o.fundTransaction&&f.push(a.calculateFee()),f.length){let R=await this.getCoinsToSpend(f);a.addCoins(R)}return a}async submitPredicate(e,t,r=g,s){let o=await this.buildPredicateTransaction(e,t,r,s);return(await this.sendTransaction(o)).waitForResult()}async submitSpendPredicate(e,t,r,s=g,o){return this.provider.submitSpendPredicate(e,t,this.address,r,s,o)}static generate(e){let t=C.generatePrivateKey(e==null?void 0:e.entropy);return new u(t,e==null?void 0:e.provider)}static fromSeed(e,t){let s=v.fromSeed(e).derivePath(t||u.defaultPath);return new u(s.privateKey)}static fromMnemonic(e,t,r){let s=q.mnemonicToSeed(e,r),a=v.fromSeed(s).derivePath(t||u.defaultPath);return new u(a.privateKey)}static fromExtendedKey(e){let t=v.fromExtendedKey(e);return new u(t.privateKey)}},m=u;m.defaultPath="m/44'/1179993420'/0'/0/0";var M=async(i,c)=>{let e=new m(process.env.GENESIS_SECRET||l(32),i.provider),t=await e.getCoinsToSpend(c),r=new z({gasLimit:1e4,gasPrice:1});r.addCoins(t),c.map(U).forEach(({amount:o,assetId:a})=>r.addCoinOutput(i.address,o,a)),await(await e.sendTransaction(r)).wait()},Re=async(i,c)=>{let e=m.generate({provider:i});return c&&await M(e,c),e};export{Re as generateTestWallet,M as seedWallet};
//# sourceMappingURL=test-utils.mjs.map